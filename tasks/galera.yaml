---
- name: Check if grastate.dat exists
  stat:
    path: /var/lib/mysql/grastate.dat
  register: mariadb_grastate
  changed_when: false

- name: Check if cluster is save to bootstrap
  when: mariadb_grastate.stat.exists
  slurp:
    path: /var/lib/mysql/grastate.dat
  register: mariadb_bootstrap
  changed_when: false

- name: Check if MariaDB is already runnning
  stat:
    path: /var/run/mysqld/mysqld.pid
  register: mariadb_pid
  changed_when: false

- name: Fail if cluster cannot be initialzed
  fail:
    msg: "cluster initializer is not ready to bootstrap cluster"
  when:
    - mariadb.galera.initializer
    - mariadb_bootstrap.content is defined
    - "'Safe to Bootstrap: 0' in mariadb_bootstrap.content | b64decode"
    - not mariadb_pid.stat.exists

- block:

  - name: Stop MariaDB
    service:
      name: mariadb
      state: stopped

  - name: Initialize cluster
    when: mariadb.galera.initializer
    command: /usr/bin/galera_new_cluster

  - name: Wait that cluster is initialized
    when: mariadb.galera.initializer
    shell: "{{ lookup('template', 'has_joined_cluster.sh') }}"

  - name: Read database root password from initializer
    when: mariadb.galera.initializer
    slurp:
      src: /root/.my.cnf
    register: mariadb_root_password
    changed_when: false

  - name: Join cluster
    when: not mariadb.galera.initializer
    service:
      name: mariadb
      state: started

  - name: Write root password to joiner nodes
    when:
      - not mariadb.galera.initializer
      - not mariadb.galera.arbitrator
    copy:
      dest: "{{ item.path }}"
      content: >
        {{ (groups[environment_name]
             | intersect(groups.galera_cluster)
             | map('extract', hostvars)
             | selectattr('mariadb.galera.initializer', 'defined')
             | selectattr('mariadb.galera.initializer', 'true')
             | first)
           .mariadb_root_password.content
           | b64decode }}
      owner: "{{ item.owner }}"
      group: "{{ item.group }}"
    loop:
      - path: /root/.my.cnf
        owner: "{{ mariadb.system.user.root.name }}"
        group: "{{ mariadb.system.user.root.group }}"
      - path: "{{ ansible_user_dir }}/.my.cnf"
        owner: "{{ ansible_user_uid }}"
        group: "{{ ansible_user_gid }}"
    loop_control:
      label: "{{ item.path }}"

  - name: Wait that node has joined cluster
    when: not mariadb.galera.initializer
    shell: "{{ lookup('template', 'has_joined_cluster.sh') }}"

  # a.k.a start garbd
  - meta: flush_handlers

  - name: Restart initializer node to stop bottestrap and rejoin cluster
    when: mariadb.galera.initializer
    service:
      name: mariadb
      state: restarted

  - name: Wait that node has rejoined cluster
    when: mariadb.galera.initializer
    shell: "{{ lookup('template', 'has_joined_cluster.sh') }}"

  when:
    - mariadb.galera.cluster
    - not mariadb.galera.arbitrator
    - >
      not mariadb_grastate.stat.exists
      or 'Safe to Bootstrap: 1' in mariadb_bootstrap.content | b64decode
      or not mariadb.galera.initializer and not mariadb_pid.stat.exists
